{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/web/src/i18n/request.ts"],"sourcesContent":["import { getRequestConfig } from 'next-intl/server';\nimport { routing } from './routing';\n\nexport default getRequestConfig(async ({ requestLocale }) => {\n  let locale = await requestLocale;\n\n  if (!locale || !routing.locales.includes(locale as any)) {\n    locale = routing.defaultLocale;\n  }\n\n  return {\n    locale,\n    messages: (await import(`../../messages/${locale}.json`)).default,\n  };\n});\n"],"names":[],"mappings":";;;AACA;AADA;;;uCAGe,CAAA,GAAA,wdAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACtD,IAAI,SAAS,MAAM;IAEnB,IAAI,CAAC,UAAU,CAAC,qIAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAgB;QACvD,SAAS,qIAAA,CAAA,UAAO,CAAC,aAAa;IAChC;IAEA,OAAO;QACL;QACA,UAAU,CAAC,oGAA6C,EAAE,OAAO;IACnE;AACF"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/web/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from 'next-intl/routing';\nimport { createNavigation } from 'next-intl/navigation';\n\nexport const routing = defineRouting({\n  // A list of all locales that are supported\n  locales: ['en'],\n\n  // Used when no locale matches\n  defaultLocale: 'en',\n});\n\n// Lightweight wrappers around Next.js' navigation APIs\n// that will consider the routing configuration\nexport const { Link, redirect, usePathname, useRouter } =\n  createNavigation(routing);\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAEO,MAAM,UAAU,CAAA,GAAA,4XAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,2CAA2C;IAC3C,SAAS;QAAC;KAAK;IAEf,8BAA8B;IAC9B,eAAe;AACjB;AAIO,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,GACrD,CAAA,GAAA,4dAAA,CAAA,mBAAgB,AAAD,EAAE"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/web/src/util/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nexport async function updateSession(\n  request: NextRequest,\n  response: NextResponse,\n  REDIRECTED_LOGGEDIN_ROUTES: string[],\n  PROTECTED_ROUTES: string[]\n) {\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value)\n          );\n          cookiesToSet.forEach(({ name, value, options }) =>\n            response.cookies.set(name, value, options)\n          );\n        },\n      },\n    }\n  );\n\n  // IMPORTANT: Avoid writing any logic between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  const isLoggedIn = !!user;\n  let completedProfile = false;\n  if (isLoggedIn)\n    completedProfile = !!(\n      await supabase\n        .from('members')\n        .select('id')\n        .eq('id', user.id)\n        .maybeSingle()\n    ).data;\n\n  console.log({ isLoggedIn, completedProfile });\n  let [, locale, ...path] = request.nextUrl.pathname.split('/');\n  if (locale !== 'en') path = [locale, ...path];\n\n  const shouldRedirectAuthedUser = REDIRECTED_LOGGEDIN_ROUTES.some(\n    (route) => path.join('/').startsWith(route) || path.join('/') === ''\n  );\n\n  if (isLoggedIn && completedProfile && shouldRedirectAuthedUser) {\n    const url = request.nextUrl.clone();\n    url.pathname = `/~`;\n    return NextResponse.redirect(url);\n  }\n\n  const shouldRedirectUnauthedUser = PROTECTED_ROUTES.some((route) =>\n    path.join('/').startsWith(route)\n  );\n\n  if (!isLoggedIn && shouldRedirectUnauthedUser) {\n    const url = request.nextUrl.clone();\n    url.pathname = `/login`;\n    return NextResponse.redirect(url);\n  }\n\n  if (isLoggedIn && !completedProfile) {\n    const url = request.nextUrl.clone();\n    if (url.pathname !== '/complete-registeration') {\n      url.pathname = `/complete-registeration`; // TODO: will change locale, for now we only have english so it's alright\n      return NextResponse.redirect(url);\n    }\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're\n  // creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return response;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;AACA;;;AAEO,eAAe,cACpB,OAAoB,EACpB,QAAsB,EACtB,0BAAoC,EACpC,gBAA0B;IAE1B,MAAM,WAAW,CAAA,GAAA,sRAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAE5B,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,SAAS,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;YAEtC;QACF;IACF;IAGF,oEAAoE;IACpE,6EAA6E;IAC7E,+CAA+C;IAE/C,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,MAAM,aAAa,CAAC,CAAC;IACrB,IAAI,mBAAmB;IACvB,IAAI,YACF,mBAAmB,CAAC,CAAC,CACnB,MAAM,SACH,IAAI,CAAC,WACL,MAAM,CAAC,MACP,EAAE,CAAC,MAAM,KAAK,EAAE,EAChB,WAAW,EAChB,EAAE,IAAI;IAER,QAAQ,GAAG,CAAC;QAAE;QAAY;IAAiB;IAC3C,IAAI,GAAG,QAAQ,GAAG,KAAK,GAAG,QAAQ,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;IACzD,IAAI,WAAW,MAAM,OAAO;QAAC;WAAW;KAAK;IAE7C,MAAM,2BAA2B,2BAA2B,IAAI,CAC9D,CAAC,QAAU,KAAK,IAAI,CAAC,KAAK,UAAU,CAAC,UAAU,KAAK,IAAI,CAAC,SAAS;IAGpE,IAAI,cAAc,oBAAoB,0BAA0B;QAC9D,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;QACnB,OAAO,2WAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,MAAM,6BAA6B,iBAAiB,IAAI,CAAC,CAAC,QACxD,KAAK,IAAI,CAAC,KAAK,UAAU,CAAC;IAG5B,IAAI,CAAC,cAAc,4BAA4B;QAC7C,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG,CAAC,MAAM,CAAC;QACvB,OAAO,2WAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,IAAI,cAAc,CAAC,kBAAkB;QACnC,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,IAAI,QAAQ,KAAK,2BAA2B;YAC9C,IAAI,QAAQ,GAAG,CAAC,uBAAuB,CAAC,EAAE,yEAAyE;YACnH,OAAO,2WAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;IACF;IAEA,+EAA+E;IAC/E,wEAAwE;IACxE,sCAAsC;IACtC,0DAA0D;IAC1D,qCAAqC;IACrC,qEAAqE;IACrE,2EAA2E;IAC3E,kBAAkB;IAClB,cAAc;IACd,0BAA0B;IAC1B,2EAA2E;IAC3E,wDAAwD;IAExD,OAAO;AACT"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/apps/web/src/middleware.ts"],"sourcesContent":["import createMiddleware from 'next-intl/middleware';\nimport { routing } from './i18n/routing';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { updateSession } from './util/supabase/middleware';\n\n/**\n * Routes authenticated user is redirected from\n */\nconst REDIRECTED_LOGGEDIN_ROUTES = ['login'];\n\n/**\n * Routes unauthenticated user/uncomplete is redirected from\n */\nconst PROTECTED_ROUTES = ['~'];\n\nconst handleI18nRouting = createMiddleware(routing);\nexport default async function middleware(request: NextRequest) {\n  const [, locale, ...segments] = request.nextUrl.pathname.split('/');\n  if (locale === '~') {\n    return await updateSession(\n      request,\n      NextResponse.next(),\n      REDIRECTED_LOGGEDIN_ROUTES,\n      PROTECTED_ROUTES\n    );\n  }\n\n  const response = handleI18nRouting(request);\n  return await updateSession(\n    request,\n    response,\n    REDIRECTED_LOGGEDIN_ROUTES,\n    PROTECTED_ROUTES\n  );\n}\n\nexport const config = {\n  // Match only internationalized pathnames\n  matcher: ['/', '/~/:path*', '/(en)/:path*'],\n};\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;AAEA;;;;;AAGA;;CAEC,GACD,MAAM,6BAA6B;IAAC;CAAQ;AAE5C;;CAEC,GACD,MAAM,mBAAmB;IAAC;CAAI;AAE9B,MAAM,oBAAoB,CAAA,GAAA,+XAAA,CAAA,UAAgB,AAAD,EAAE,qIAAA,CAAA,UAAO;AACnC,eAAe,WAAW,OAAoB;IAC3D,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,QAAQ,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/D,IAAI,WAAW,KAAK;QAClB,OAAO,MAAM,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EACvB,SACA,2WAAA,CAAA,eAAY,CAAC,IAAI,IACjB,4BACA;IAEJ;IAEA,MAAM,WAAW,kBAAkB;IACnC,OAAO,MAAM,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EACvB,SACA,UACA,4BACA;AAEJ;AAEO,MAAM,SAAS;IACpB,yCAAyC;IACzC,SAAS;QAAC;QAAK;QAAa;KAAe;AAC7C"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}